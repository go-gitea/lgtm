package mocks

import (
	"net/http"

	"github.com/go-gitea/lgtm/model"
	"github.com/go-gitea/lgtm/remote"

	"github.com/stretchr/testify/mock"
	"golang.org/x/net/context"
)

// Remote is an autogenerated mock type for the Remote type
type Remote struct {
	mock.Mock
}

// AddIssueLabels provides a mock function with given fields: user, repo, number, lables
func (_m *Remote) AddIssueLabels(c context.Context, user *model.User, repo *model.Repo, number int, lables []string) error {
	ret := _m.Called(c, user, repo, number, lables)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User, *model.Repo, int, []string) error); ok {
		r0 = rf(c, user, repo, number, lables)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelHook provides a mock function with given fields: _a0, _a1, _a2
func (_m *Remote) DelHook(c context.Context, _a0 *model.User, _a1 *model.Repo, _a2 string) error {
	ret := _m.Called(c, _a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User, *model.Repo, string) error); ok {
		r0 = rf(c, _a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetComments provides a mock function with given fields: _a0, _a1, _a2
func (_m *Remote) GetComments(c context.Context, _a0 *model.User, _a1 *model.Repo, _a2 int) ([]*model.Comment, error) {
	ret := _m.Called(c, _a0, _a1, _a2)

	var r0 []*model.Comment
	if rf, ok := ret.Get(0).(func(context.Context, *model.User, *model.Repo, int) []*model.Comment); ok {
		r0 = rf(c, _a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.User, *model.Repo, int) error); ok {
		r1 = rf(c, _a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContents provides a mock function with given fields: _a0, _a1, _a2
func (_m *Remote) GetContents(c context.Context, _a0 *model.User, _a1 *model.Repo, _a2 string) ([]byte, error) {
	ret := _m.Called(c, _a0, _a1, _a2)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, *model.User, *model.Repo, string) []byte); ok {
		r0 = rf(c, _a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.User, *model.Repo, string) error); ok {
		r1 = rf(c, _a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHook provides a mock function with given fields: r
func (_m *Remote) GetHook(c context.Context, r *http.Request) (*model.Hook, error) {
	ret := _m.Called(c, r)

	var r0 *model.Hook
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) *model.Hook); ok {
		r0 = rf(c, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Hook)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *http.Request) error); ok {
		r1 = rf(c, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMembers provides a mock function with given fields: _a0, _a1
func (_m *Remote) GetMembers(c context.Context, _a0 *model.User, _a1 string) ([]*model.Member, error) {
	ret := _m.Called(c, _a0, _a1)

	var r0 []*model.Member
	if rf, ok := ret.Get(0).(func(context.Context, *model.User, string) []*model.Member); ok {
		r0 = rf(c, _a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Member)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.User, string) error); ok {
		r1 = rf(c, _a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPerm provides a mock function with given fields: _a0, _a1, _a2
func (_m *Remote) GetPerm(c context.Context, _a0 *model.User, _a1 string, _a2 string) (*model.Perm, error) {
	ret := _m.Called(c, _a0, _a1, _a2)

	var r0 *model.Perm
	if rf, ok := ret.Get(0).(func(context.Context, *model.User, string, string) *model.Perm); ok {
		r0 = rf(c, _a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Perm)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.User, string, string) error); ok {
		r1 = rf(c, _a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRepo provides a mock function with given fields: _a0, _a1, _a2
func (_m *Remote) GetRepo(c context.Context, _a0 *model.User, _a1 string, _a2 string) (*model.Repo, error) {
	ret := _m.Called(c, _a0, _a1, _a2)

	var r0 *model.Repo
	if rf, ok := ret.Get(0).(func(context.Context, *model.User, string, string) *model.Repo); ok {
		r0 = rf(c, _a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Repo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.User, string, string) error); ok {
		r1 = rf(c, _a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRepos provides a mock function with given fields: _a0
func (_m *Remote) GetRepos(c context.Context, _a0 *model.User) ([]*model.Repo, error) {
	ret := _m.Called(c, _a0)

	var r0 []*model.Repo
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) []*model.Repo); ok {
		r0 = rf(c, _a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Repo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.User) error); ok {
		r1 = rf(c, _a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeams provides a mock function with given fields: _a0
func (_m *Remote) GetTeams(c context.Context, _a0 *model.User) ([]*model.Team, error) {
	ret := _m.Called(c, _a0)

	var r0 []*model.Team
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) []*model.Team); ok {
		r0 = rf(c, _a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Team)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.User) error); ok {
		r1 = rf(c, _a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: _a0, _a1
func (_m *Remote) GetUser(c context.Context, _a0 http.ResponseWriter, _a1 *http.Request) (*model.User, error) {
	ret := _m.Called(c, _a0, _a1)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, http.ResponseWriter, *http.Request) *model.User); ok {
		r0 = rf(c, _a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, http.ResponseWriter, *http.Request) error); ok {
		r1 = rf(c, _a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserToken provides a mock function with given fields: _a0
func (_m *Remote) GetUserToken(c context.Context, _a0 string) (string, error) {
	ret := _m.Called(c, _a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(c, _a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, _a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIssueLabels get all the labels of an issue
func (_m *Remote) GetIssueLabels(c context.Context, user *model.User, repo *model.Repo, number int) ([]string, error) {
	ret := _m.Called(c, user, repo, number)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, *model.User, *model.Repo, int) []string); ok {
		r0 = rf(c, user, repo, number)
	} else {
		r0 = ret.Get(0).([]string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.User, *model.Repo, int) error); ok {
		r1 = rf(c, user, repo, number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveIssueLabels provides a mock function with given fields: user, repo, number, labels
func (_m *Remote) RemoveIssueLabels(c context.Context, user *model.User, repo *model.Repo, number int, labels []string) error {
	ret := _m.Called(c, user, repo, number, labels)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User, *model.Repo, int, []string) error); ok {
		r0 = rf(c, user, repo, number, labels)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetHook provides a mock function with given fields: _a0, _a1, _a2
func (_m *Remote) SetHook(c context.Context, _a0 *model.User, _a1 *model.Repo, _a2 string) error {
	ret := _m.Called(c, _a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User, *model.Repo, string) error); ok {
		r0 = rf(c, _a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStatus provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Remote) SetStatus(c context.Context, _a0 *model.User, _a1 *model.Repo, _a2 int, _a3 int, _a4 int) error {
	ret := _m.Called(c, _a0, _a1, _a2, _a3, _a4)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User, *model.Repo, int, int, int) error); ok {
		r0 = rf(c, _a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetReviews provides a mock function with given fields: _a0
func (_m *Remote) GetReviews(c context.Context, _a0 *model.User, _a1 *model.Repo, _a2 int) ([]*model.Review, error) {
	ret := _m.Called(c, _a0, _a1, _a2)

	var r0 []*model.Review
	if rf, ok := ret.Get(0).(func(context.Context, *model.User, *model.Repo, int) []*model.Review); ok {
		r0 = rf(c, _a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.User, *model.Repo, int) error); ok {
		r1 = rf(c, _a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

var _ remote.Remote = (*Remote)(nil)
